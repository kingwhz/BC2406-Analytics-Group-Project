cor(mtcars$mpg, mtcars$wt)
plot(mtcars$mpg, mtcars$hp)
cor(mtcars$mpg, mtcars$hp)
plot(mtcars$mpg, mtcars$qsec)
cor(mtcars$mpg, mtcars$qsec)
plot(mtcars$drat, mtcars$qsec)
cor(mtcars$drat, mtcars$qsec)
plot(mtcars$hp, mtcars$cyl)
cor(mtcars$hp, mtcars$cyl)
# m1 with wt only -------------------------------------------------------------------
m1 <- lm(mpg ~ wt, data = mtcars)
summary(m1) # See the PPT file
plot(x = mtcars$wt, y = mtcars$mpg, main = "Regression Line with wt as sole factor")
abline(m1, col = "red")
identify(x = mtcars$wt, y = mtcars$mpg) # Identify the cases selected in Plot.
par(mfrow = c(2,2))  # Plot 4 charts in one plot - 2 by 2.
plot(m1)  # Plot model 1 diagnostics, See the PPT file
par(mfrow = c(1,1))  # Reset plot options to 1 chart in one plot.
# m2 with Wt and Wt^2 ----------------------------------------------------------------
m2 <- lm(mpg ~ wt + I(wt^2), data = mtcars)
summary(m2)
par(mfrow = c(2,2))  # Plot 4 charts in one plot - 2 by 2.
plot(m2)  # Plot model 2 diagnostics
par(mfrow = c(1,1))  # Reset plot options to 1 chart in one plot.
# m3 with wt and cyl ----------------------------------------------------------------
str(mtcars$cyl)
mtcars <- mtcars  # create a copy to preserve the orignal dataset.
mtcars$cyl <- factor(mtcars$cyl)
str(mtcars$cyl)  # Check data structure is now factor
levels(mtcars$cyl)
m3 <- lm(mpg ~ wt + cyl, data = mtcars)
summary(m3)  # See the PPT file
# m1 with wt only -------------------------------------------------------------------
m1 <- lm(mpg ~ wt, data = mtcars)
plot(m1)  # Plot model 1 diagnostics, See the PPT file
abline(m1, col = "red")
identify(x = mtcars$wt, y = mtcars$mpg) # Identify the cases selected in Plot.
## importing the relevant packages
library(data.table)
library(rpart)
library(rpart.plot)
library(stringr)
library(ggplot2)
library(caret)
library(skimr)
library(dplyr)
library(tidyr)
library(tidyverse)
library(class)
library(RANN)
library(VIM)
## Importing the dataset
setwd("/Users/junlongng/Desktop/NTU/Year 2/Semester 1/BC2406 Analytics 1/AY22 BC2406 CBA")
df1 = fread("/Users/junlongng/Desktop/NTU/Year 2/Semester 1/BC2406 Analytics 1/AY22 BC2406 CBA/homeloan2.csv")
summary(df1)
##Q1.a)
##Checking the names of all columns
colnames(df1)
## Checking the type of all columns
sapply(df1, class)
##LoanID as character is okay
typeof(df1$Loan_ID)
## Data types that should be class recast to factorial
factorcolumns = c("Gender","Married","Self_Employed","Credit_Score","Loan_Status","Education")
## Recasting the class to factor
df1[, (factorcolumns):= lapply(.SD, factor), .SDcols = factorcolumns]
##Need to change dependents to factored categorical data
## This at first glance should be an integervalue but there is an option for 3+..
## Therefore dependents can be a categorical data that determines how many people are depending on the person
df1$Dependents = factor(df1$Dependents, ordered = T, levels = c("0","1","2","3+",""))
## Similar to dependents, property area can be categorised into A,B,C
df1$Property_Area = factor(df1$Property_Area,ordered = F, levels = c("A","B","C"))
class(df1$Property_Area)
## Both income can be numeric as it can be represented as Income
df1$ApplicantIncome = as.numeric(df1$ApplicantIncome)
df1$CoapplicantIncome = as.numeric(df1$CoapplicantIncome)
## Loan amount can be numeric as you can represent loans in decimals
df1$LoanAmount = as.numeric(df1$LoanAmount)
## Loan amount should be numeric as you can represent a month in decimals i.e. 1.5 months
df1$Loan_Amount_Term = as.numeric(df1$Loan_Amount_Term)
## Checking for NA values
sum(is.na(df1))
## But upon further inspection, there are more values that R did not pick up as they were turned into " ".
summary(df1)
sapply(df1, class)
## First step is to convert blank values to NA values
df1[df1==""] = NA
## Experimenting by creating a fork of df1
dfnew=df1
## Data Exploration
## Using KNN to change gender NA values
dtknntest = knn(dfnew,variable = c("Gender"), k =10)
## Data Exploration
## Using KNN to change gender NA values
dtknntest = knn(dfnew, k =10)
?knn
?kNN
## Data Exploration
## Using KNN to change gender NA values
dtknntest = kNN(dfnew, k =10)
summary(dtknntest)
## Data Exploration
## Using KNN to change gender NA values
dtknntest = kNN(dfnew, variable = c("Gender") k =10)
## Data Exploration
## Using KNN to change gender NA values
dtknntest = kNN(dfnew, variable = c("Gender"), k =10)
## First step is to convert blank values to NA values
df1[df1==""] = NA
## Experimenting by creating a fork of df1
dfnew=df1
dfnew$Gender= factor(dfnew$Gender,levels = c("Male","Female"),labels=c(1,0))
summary(dfnew)
## Using KNN to change gender NA values
knntest = kNN(dfnew, variable = c("Gender"), k =10)
summary(knntest)
dfnew$Married
## Using KNN to change gender NA values
## Why use KNN for this variable?
knntest = kNN(dfnew, variable = c("Gender","Married"), k =10)
dfnew$Married
summary(knntest)
dfnew$Married
knntest$Married
summary(knntest$Married)
knntest$Dependents
## Using KNN to change gender NA values
## Why use KNN for this variable?
knntest = kNN(dfnew, variable = c("Gender","Married","Dependents"), k =10)
## Using KNN to change gender NA values
## Why use KNN for this variable?
knntest = kNN(dfnew, variable = c("Gender","Married","Dependents","Self_Employed"), k =10)
summary(knntest)
## Using KNN to change gender NA values
## Why use KNN for this variable?
knntest = kNN(dfnew, variable = c("Gender","Married","Dependents","Self_Employed","Loan_Amount_Term","Credit_Score"), k =10)
summary(knntest)
## Checking if there is still any NA values throughout the whole data set.
sum(is.na(knntest))
## Checking how many cases are left is the same as counting the number of rows in the data set
nrow(knntest)
## There are 592 cases
colnames(knntest)
## -------------- Q2 ------------- ##
## Viewing histogram
ggplot(data=knntest, aes(LoanAmount))+geom_histogram(bins=40,color="blue",fill="cyan")
## Creating a density plot
ggplot(data=knntest, aes(LoanAmount)) + geom_density(color="blue", fill="cyan", alpha=0.2)
ggplot(data=knntest, aes(Gender))+geom_histogram(bins=40,color="blue",fill="cyan")
ggplot(data=knntest, aes(Gender))+geom_histogram(color="blue",fill="cyan")
?ggplot
ggplot(knntest, aes(Gender))+ geom_histogram(color = "blue",alpha=0.3)+
scale_x_continuous(label = comma)+
scale_y_continuous(label = comma)
ggplot(knntest, aes(Gender))+ geom_histogram(color = "blue",alpha=0.3)+
scale_x_continuous+
scale_y_continuous)
ggplot(knntest, aes(Gender))+ geom_histogram(color = "blue",alpha=0.3)+ scale_x_continuous+ scale_y_continuous
ggplot(knntest, aes(Gender))+ geom_histogram(color = "blue",alpha=0.3)+ scale_x_continuous()+ scale_y_continuous()
ggplot(data = knntest, aes(Gender)) + geom_histogram(color="blue")
ggplot(data = knntest, aes(Gender)) + geom_bar(color="blue")
ggplot(data = knntest, aes(Gender)) + geom_bar(color="blue", fill="cyan")
ggplot(data=knntest, aes(Gender x= "gender"))+geom_histogram(color="blue",fill="cyan")
ggplot(data=knntest, aes(Gender, x="gender"))+geom_histogram(color="blue",fill="cyan")
?ggplot
ggplot(data=knntest, aes(Gender, x="gender"))+geom_histogram(color="blue",fill="cyan")
ggplot(data=knntest, aes(Gender, x=gender))+geom_histogram(color="blue",fill="cyan")
ggplot(data=knntest, aes(Gender, x=Gender))+geom_histogram(color="blue",fill="cyan")
ggplot(data=knntest, aes(Gender))+geom_histogram(color="blue",fill="cyan")
## The below graph shows us that on average, there are more males that take loans
ggplot(data = knntest, aes(Gender, x=Gender)) + geom_bar(color="blue", fill="cyan")
## The below graph shows us that on average, there are more males that take loans
ggplot(data = knntest, aes(Gender, x=Gender)) + geom_bar(color="blue", fill="cyan")
## The below graph shows us that on average, there are more males that take loans
ggplot(data = knntest, aes(Gender) + geom_bar(color="blue", fill="cyan")
?ggplot
## Viewing a density plot
ggplot(data=knntest, aes(LoanAmount)) + geom_density(color="blue", fill="cyan", alpha=0.2)
## To replace Gender, I've went with using mode, should use another way but to experiment...
# calc_mode <- function(x){
# List the distinct / unique values
distinct_values <- unique(x)
# Count the occurrence of each distinct value
distinct_tabulate <- tabulate(match(x, distinct_values))
# Return the value with the highest occurrence
distinct_values[which.max(distinct_tabulate)]
}
## The below graph shows us that on average, there are more males that take loans
ggplot(data = knntest, aes(Gender)) + geom_bar(color="blue", fill="cyan")
ggplot(data = knntest, aes(Married)) + geom_bar(color="blue", fill="cyan")
## There are 592 cases
colnames(knntest)
ggplot(data=knntest, aes(Loan_ID))+geom_histogram(bins=40,color="blue",fill="cyan")
knntest$Loan_ID
colnames(knntest)
ggplot(data=knntest, aes(Dependents))+geom_histogram(bins=40,color="blue",fill="cyan")
ggplot(data=knntest, aes(Dependents))+geom_bar(bins=40,color="blue",fill="cyan")
factor<-names(keep(knntest,is.factor))
factor<-names(keep(knntest,is.factor))
factor = names(keep(knntest,is.factor))
gglist = list()
for(x in 1: (length(factor)-1)){
gglist[x]<-list(ggplot(data=data,aes_string(factor[x],fill='Loan_Status'))+
geom_bar(position = 'dodge')+
theme(legend.position = c(.9,.75),legend.background=element_rect(fill = alpha("white", 0.5)))+
scale_fill_brewer(palette = 'Paired'))
}
ggarrange(plotlist=gglist,ncol = 2, nrow = 4)
install.packages("ggpubr")
library(ggpubr)
factor = names(keep(knntest,is.factor))
gglist = list()
for(x in 1: (length(factor)-1)){
gglist[x]<-list(ggplot(data=data,aes_string(factor[x],fill='Loan_Status'))+
geom_bar(position = 'dodge')+
theme(legend.position = c(.9,.75),legend.background=element_rect(fill = alpha("white", 0.5)))+
scale_fill_brewer(palette = 'Paired'))
}
ggarrange(plotlist=gglist,ncol = 2, nrow = 4)
gglist[x]<-list(ggplot(data=knntest,aes_string(factor[x],fill='Loan_Status'))+
geom_bar(position = 'dodge')+
theme(legend.position = c(.9,.75),legend.background=element_rect(fill = alpha("white", 0.5)))+ scale_fill_brewer(palette = 'Paired'))
factor = names(keep(knntest,is.factor))
gglist = list()
for(x in 1: (length(factor)-1)){
gglist[x]<-list(ggplot(data=knntest,aes_string(factor[x],fill='Loan_Status'))+
geom_bar(position = 'dodge')+
theme(legend.position = c(.9,.75),legend.background=element_rect(fill = alpha("white", 0.5)))+ scale_fill_brewer(palette = 'Paired'))
}
ggarrange(plotlist=gglist,ncol = 2, nrow = 4)
## Experimenting by creating a fork of df1
dfnew=df1
## Using KNN to change gender NA values
## Why use KNN for this variable?
knntest = kNN(dfnew, variable = c("Gender","Married","Dependents","Self_Employed","Loan_Amount_Term","Credit_Score"), k =10)
summary(knntest)
## Checking if there is still any NA values throughout the whole data set.
sum(is.na(knntest))
## Checking how many cases are left is the same as counting the number of rows in the data set
nrow(knntest)
## There are 592 cases
colnames(knntest)
dim(knntest)
## Experimenting by creating a fork of df1
dfnew=df1
## Using KNN to change gender NA values
## Why use KNN for this variable?
knntest = kNN(dfnew, variable = c("Gender","Married","Dependents","Self_Employed","Loan_Amount_Term","Credit_Score"), k =10)
summary(knntest)
## Checking if there is still any NA values throughout the whole data set.
sum(is.na(knntest))
## Checking how many cases are left is the same as counting the number of rows in the data set
nrow(knntest)
dim(knntest)
## There are 592 cases
colnames(knntest)
## -------------- Q2 ------------- ##
## Viewing histogram
ggplot(data=knntest, aes(LoanAmount))+geom_histogram(bins=40,color="blue",fill="cyan")
## The below graph shows us that on average, there are more males that take loans
ggplot(data = knntest, aes(Gender)) + geom_bar(color="blue", fill="cyan")
## The below graph shows us that on average, there are more married people that take loans
ggplot(data = knntest, aes(Married)) + geom_bar(color="blue", fill="cyan")
## The below graph shows us that on average people with 0 dependents apply for the most frequency of loan. Does not say anything about the loan amount. Just the frequency
ggplot(data=knntest, aes(Dependents))+geom_bar(bins=40,color="blue",fill="cyan")
## Viewing categorical variables as a whole
factor = names(keep(knntest,is.factor))
gglist = list()
for(x in 1: (length(factor)-1)){
gglist[x]<-list(ggplot(data=knntest,aes_string(factor[x],fill='Loan_Status'))+
geom_bar(position = 'dodge')+
theme(legend.position = c(.9,.75),legend.background=element_rect(fill = alpha("white", 0.5)))+ scale_fill_brewer(palette = 'Paired'))
}
ggarrange(plotlist=gglist,ncol = 2, nrow = 4)
## Viewing continuous variables as a whole
numeric = names(keep(knntest, is.numeric))
numeric
sapply(knntest, class)
knntest$Gender_imp
knntest$Gender_imp = factor(knntest$Gender_imp)
## Viewing categorical variables as a whole
factor = names(keep(knntest,is.factor))
gglist = list()
for(x in 1: (length(factor)-1)){
gglist[x]<-list(ggplot(data=knntest,aes_string(factor[x],fill='Loan_Status'))+
geom_bar(position = 'dodge')+
theme(legend.position = c(.9,.75),legend.background=element_rect(fill = alpha("white", 0.5)))+ scale_fill_brewer(palette = 'Paired'))
}
ggarrange(plotlist=gglist,ncol = 2, nrow = 4)
## The below graph shows us that on average, there are more males that take loans
ggplot(data = knntest, aes(Gender_imp)) + geom_bar(color="blue", fill="cyan")
## Experimenting by creating a fork of df1
dfnew=df1
## Using KNN to change gender NA values
## Why use KNN for this variable?
knntest = kNN(dfnew, variable = c("Gender","Married","Dependents","Self_Employed","Loan_Amount_Term","Credit_Score"), k =10)
## Checking if there is still any NA values throughout the whole data set.
sum(is.na(knntest))
## Checking how many cases are left is the same as counting the number of rows in the data set
nrow(knntest)
dim(knntest)
## There are 592 cases
colnames(knntest)
## Viewing categorical variables as a whole
factor = names(keep(knntest,is.factor))
gglist = list()
for(x in 1: (length(factor)-1)){
gglist[x]<-list(ggplot(data=knntest,aes_string(factor[x],fill='Loan_Status'))+
geom_bar(position = 'dodge')+
theme(legend.position = c(.9,.75),legend.background=element_rect(fill = alpha("white", 0.5)))+ scale_fill_brewer(palette = 'Paired'))
}
ggarrange(plotlist=gglist,ncol = 2, nrow = 4)
## Viewing continuous variables as a whole
numeric = names(keep(knntest, is.numeric))
numeric
colnames(knntest)
numeric
numeric = names(keep(knntest, is.numeric))
gglist1 = list()
gglist2 = list()
for(x in 1:length(numeric)){
gglist1[x]<-list(ggplot(data=knntest,aes_string(x='Loan_Status',y=numeric[x],color='Loan_Status'))+
geom_boxplot()+
theme(legend.position = c(.85,.85),legend.background=element_rect(fill = alpha("white", 0.5)))+
scale_color_brewer(palette = 'Dark2'))
gglist2[x]<-list(ggplot(data,aes_string(numeric[x],fill='Loan_Status'))+geom_density(alpha=0.5)+
theme(legend.position = c(.9,.85),legend.background=element_rect(fill = alpha("white", 0.5)))+
scale_fill_brewer(palette = 'Dark2'))
}
ggarrange(plotlist=gglist1,ncol = 3, nrow = 1)
ggarrange(plotlist=gglist2,ncol = 1, nrow = 3)
ggarrange(plotlist=gglist1,ncol = 3, nrow = 1)
ggarrange(plotlist=gglist2,ncol = 1, nrow = 3)
## Viewing categorical variables as a whole
factor = names(keep(knntest,is.factor))
gglist = list()
for(x in 1: (length(factor)-1)){
gglist[x]=list(ggplot(data=knntest,aes_string(factor[x],fill='Loan_Status'))+
geom_bar(position = 'dodge')+
theme(legend.position = c(.9,.75),legend.background=element_rect(fill = alpha("white", 0.5)))+ scale_fill_brewer(palette = 'Paired'))
}
ggarrange(plotlist=gglist,ncol = 2, nrow = 4)
ggarrange(plotlist=gglist2,ncol = 1, nrow = 3)
ggarrange(plotlist=gglist1,ncol = 3, nrow = 1)
ncol(knntest$Gender)
count(knntest$Gender)
summary(knntest$Gender)
ggarrange(plotlist=gglist)
ggarrange(plotlist=gglist1)
numeric
sapply(knntest,class)
numeric<-names(keep(data,is.numeric))
gglist1<-list()
gglist2<-list()
for(x in 1:length(numeric)){
gglist1[x]<-list(ggplot(data=knntest,aes_string(x='Loan_Status',y=numeric[x],color='Loan_Status'))+
geom_boxplot()+
theme(legend.position = c(.85,.85),legend.background=element_rect(fill = alpha("white", 0.5)))+
scale_color_brewer(palette = 'Dark2'))
gglist2[x]<-list(ggplot(data,aes_string(numeric[x],fill='Loan_Status'))+geom_density(alpha=0.5)+
theme(legend.position = c(.9,.85),legend.background=element_rect(fill = alpha("white", 0.5)))+
scale_fill_brewer(palette = 'Dark2'))
}
#####################3
numeric<-names(keep(knntest,is.numeric))
gglist1<-list()
gglist2<-list()
for(x in 1:length(numeric)){
gglist1[x]<-list(ggplot(data=knntest,aes_string(x='Loan_Status',y=numeric[x],color='Loan_Status'))+
geom_boxplot()+
theme(legend.position = c(.85,.85),legend.background=element_rect(fill = alpha("white", 0.5)))+
scale_color_brewer(palette = 'Dark2'))
gglist2[x]<-list(ggplot(data,aes_string(numeric[x],fill='Loan_Status'))+geom_density(alpha=0.5)+
theme(legend.position = c(.9,.85),legend.background=element_rect(fill = alpha("white", 0.5)))+
scale_fill_brewer(palette = 'Dark2'))
}
gglist2[x]<-list(ggplot(data,aes_string(numeric[x],fill='Loan_Status'))+geom_density(alpha=0.5)+
theme(legend.position = c(.9,.85),legend.background=element_rect(fill = alpha("white", 0.5)))+
scale_fill_brewer(palette = 'Dark2'))
gglist1
## Viewing continuous variables as a whole
numeric = names(keep(knntest, is.numeric))
library(ggplot2)
library(purrr)
library(ggpubr)
library(mice)
## Kaggle CBA Notebook
library(ggplot2)
library(purrr)
library(ggpubr)
library(mice)
data <- read.csv(file.choose())
data=data[,-1]
data$Gender[data$Gender=='']<-NA
data$Gender<-factor(data$Gender)
data$Married[data$Married=='']<-NA
data$Married<-factor(data$Married)
data$Dependents[data$Dependents=='']<-NA
data$Dependents<-factor(data$Dependents)
data$Self_Employed[data$Self_Employed=='']<-NA
data$Self_Employed<-factor(data$Self_Employed)
data$Loan_Amount_Term<-factor(data$Loan_Amount_Term)
data$Credit_History<-factor(data$Credit_History)
summary(data)
factor<-names(keep(data,is.factor))
gglist<-list()
for(x in 1:(length(factor)-1)){
gglist[x]<-list(ggplot(data=data,aes_string(factor[x],fill='Loan_Status'))+
geom_bar(position = 'dodge')+
theme(legend.position = c(.9,.75),legend.background=element_rect(fill = alpha("white", 0.5)))+
scale_fill_brewer(palette = 'Paired'))
}
ggarrange(plotlist=gglist,ncol = 2, nrow = 4)
summary(data)
gglist1 = list()
gglist2 = list()
for(x in 1:length(numeric)){
gglist1[x]=list(ggplot(data=knntest,aes_string(x='Loan_Status',y=numeric[x],color='Loan_Status'))+ geom_boxplot()+theme(legend.position = c(.85,.85),legend.background=element_rect(fill = alpha("white", 0.5)))+ scale_color_brewer(palette = 'Dark2'))
gglist2[x]<-list(ggplot(data,aes_string(numeric[x],fill='Loan_Status'))+geom_density(alpha=0.5)+
theme(legend.position = c(.9,.85),legend.background=element_rect(fill = alpha("white", 0.5)))+
scale_fill_brewer(palette = 'Dark2'))
}
ggarrange(plotlist=gglist1)
ggarrange(plotlist=gglist2,ncol = 1, nrow = 3)
for(x in 1:length(numeric)){
gglist1[x]=list(ggplot(data=knntest,aes_string(x='Loan_Status',y=numeric[x],color='Loan_Status'))+ geom_boxplot()+theme(legend.position = c(.85,.85),legend.background=element_rect(fill = alpha("white", 0.5)))+ scale_color_brewer(palette = 'Dark2'))
ggarrange(plotlist=gglist1)
for(x in 1:length(numeric)){
gglist1[x]=list(ggplot(data=knntest,aes_string(x='Loan_Status',y=numeric[x],color='Loan_Status'))+ geom_boxplot()+theme(legend.position = c(.85,.85),legend.background=element_rect(fill = alpha("white", 0.5)))+ scale_color_brewer(palette = 'Dark2'))
for(x in 1:length(numeric)){
gglist1[x]=list(ggplot(data=knntest,aes_string(x='Loan_Status',y=numeric[x],color='Loan_Status'))+ geom_boxplot()+theme(legend.position = c(.85,.85),legend.background=element_rect(fill = alpha("white", 0.5)))+ scale_color_brewer(palette = 'Dark2'))
}
ggarrange(plotlist=gglist1)
gglist2[x]<-list(ggplot(data = knntest,aes_string(numeric[x],fill='Loan_Status'))+geom_density(alpha=0.5)+
theme(legend.position = c(.9,.85),legend.background=element_rect(fill = alpha("white", 0.5)))+
scale_fill_brewer(palette = 'Dark2'))
ggarrange(plotlist=gglist2,ncol = 1, nrow = 3)
gglist2[x]<-list(ggplot(data = knntest,aes_string(numeric[x]))+geom_density(alpha=0.5)+
theme(legend.position = c(.9,.85),legend.background=element_rect(fill = alpha("white", 0.5)))+
scale_fill_brewer(palette = 'Dark2'))
ggarrange(plotlist=gglist1)
ggarrange(plotlist=gglist2,ncol = 1, nrow = 3)
for(x in 1:length(numeric)){
gglist1[x]=list(ggplot(data=knntest,aes_string(x='Loan_Status',y=numeric[x],color='Loan_Status'))+ geom_boxplot()+theme(legend.position = c(.85,.85),legend.background=element_rect(fill = alpha("white", 0.5)))+ scale_color_brewer(palette = 'Dark2'))
}
ggarrange(plotlist=gglist1)
ggarrange(plotlist=gglist1, ncol =2, nrow =2)
ggarrange(plotlist=gglist1, ncol =3, nrow =1)
ggarrange(plotlist=gglist1)
ggarrange(plotlist=gglist)
## First step is to convert blank values to NA values
df1[df1==""] = NA
## Experimenting by creating a fork of df1
dfnew=df1
## Using KNN to change gender NA values
## Why use KNN for this variable?
knntest = kNN(dfnew, variable = c("Gender","Married","Dependents","Self_Employed","Loan_Amount_Term","Credit_Score"), k =10)
summary(knntest)
## Checking if there is still any NA values throughout the whole data set.
sum(is.na(knntest))
## Checking how many cases are left is the same as counting the number of rows in the data set
nrow(knntest)
dim(knntest)
## Viewing histogram
ggplot(data=knntest, aes(LoanAmount))+geom_histogram(bins=40,color="blue",fill="cyan")
## Viewing categorical variables as a whole
factor = names(keep(knntest,is.factor))
gglist = list()
for(x in 1: (length(factor)-1)){gglist[x]=list(ggplot(data=knntest,aes_string(factor[x],fill='Loan_Status'))+ geom_bar(position = 'dodge')+ theme(legend.position = c(.9,.75),legend.background=element_rect(fill = alpha("white", 0.5)))+ scale_fill_brewer(palette = 'Paired'))}
ggarrange(plotlist=gglist)
## Viewing continuous variables as a whole
numeric = names(keep(knntest, is.numeric))
gglist1 = list()
gglist2 = list()
for(x in 1:length(numeric)){
gglist1[x]=list(ggplot(data=knntest,aes_string(x='Loan_Status',y=numeric[x],color='Loan_Status'))+ geom_boxplot()+theme(legend.position = c(.85,.85),legend.background=element_rect(fill = alpha("white", 0.5)))+ scale_color_brewer(palette = 'Dark2'))
}
ggarrange(plotlist=gglist1)
gglist2[x]<-list(ggplot(data = knntest,aes_string(numeric[x],fill='Loan_Status'))+geom_density(alpha=0.5)+
theme(legend.position = c(.9,.85),legend.background=element_rect(fill = alpha("white", 0.5)))+
scale_fill_brewer(palette = 'Dark2'))
ggarrange(plotlist=gglist2,ncol = 1, nrow = 3)
ggarrange(plotlist=gglist2)
ggarrange(plotlist=gglist1)
ggarrange(plotlist=gglist2)
,ncol = 1, nrow = 3
ggarrange(plotlist=gglist2,ncol = 1, nrow = 3)
for(x in 1:length(numeric)){
gglist2[x]<-list(ggplot(data = knntest,aes_string(numeric[x],fill='Loan_Status'))+geom_density(alpha=0.5)+
theme(legend.position = c(.9,.85),legend.background=element_rect(fill = alpha("white", 0.5)))+
scale_fill_brewer(palette = 'Dark2'))
}
ggarrange(plotlist=gglist2,ncol = 1, nrow = 3)
for(x in 1:length(numeric)){
gglist2[x]<-list(ggplot(data = knntest,aes_string(numeric[x],fill='Loan_Status'))+geom_density(alpha=0.5)+
theme(legend.position = c(.9,.85),legend.background=element_rect(fill = alpha("white", 0.5)))+
scale_fill_brewer(palette = 'Dark2'))
}
ggarrange(plotlist=gglist2,ncol = 1, nrow = 3)
gglist2
ggarrange(plotlist=gglist2,ncol = 1, nrow = 3)
gglist2
cleaned_data[,"re.admission.within.28.days"]
## Setting the working directory
setwd("/Users/junlongng/Desktop/NTU/Year 2/Semester 1/BC2406 Analytics 1/Group Project")
## Importing the data
cleaned_data = fread(file.choose())
cleaned_data[,"re.admission.within.28.days"]
factor = names(keep(knntest,is.factor))
gglist = list()
for(x in 1: (length(factor)-1)){gglist[x]=list(ggplot(data=knntest,aes_string(factor[x],fill='Loan_Status'))+ geom_bar(position = 'dodge')+ theme(legend.position = c(.9,.75),legend.background=element_rect(fill = alpha("white", 0.5)))+ scale_fill_brewer(palette = 'Paired'))}
ggarrange(plotlist=gglist)
